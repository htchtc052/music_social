// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genders {
  NOT_SPECIFIED
  FEMALE
  MALE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String
  password  String
  firstName String?
  lastName  String?
  gender    Genders? @default(NOT_SPECIFIED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  Token     Token[]
  Track     Track[]

  @@unique([email, isDeleted])
  @@map(name: "users")
}

model Token {
  userId       Int
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "tokens")
}

model Track {
  id                Int        @id @default(autoincrement())
  title             String
  private           Boolean    @default(false)
  keywords          String[]
  description       String?
  hiddenDescription String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  isDeleted         Boolean    @default(false)
  userId            Int
  user              User       @relation(fields: [userId], references: [id])
  file              TrackFile?

  @@map(name: "tracks")
}

model TrackFile {
  id       Int    @id @default(autoincrement())
  filePath String
  fileSize Int    @default(0)
  mimetype String
  duration Int
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  Int    @unique

  @@map(name: "tracks_files")
}
